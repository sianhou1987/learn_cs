/*
 *	.text 表示代码段
 *  .p2align 4,,15 表示下一行代码的对齐方式，第一个参数表示按2的多少次方字节对齐
 *		第二个参数表示额外空间充填什么字符，空着表示0；
 *		第三个参数表示最多充填多少个字节
 * 	.section.rdata, "dr" 只读数据段
 */


	.file	"helloworld.c"
	.text
	.section	.rodata.str1.1,"aMS",@progbits,1	// 下面是只读数据
.LC0:									// "LC0"不是全局可见
	.string	"Hello world"				// 字符串
	.text								//	代码段
	.globl	main						// 表示main是全局的，同一个程序的其他模块可以调用
	.type	main, @function
main:									// 以":"结尾的字符串用以表示变量或函数的地址
.LFB41:
	.cfi_startproc
	leal	4(%esp), %ecx
	.cfi_def_cfa 1, 0
	andl	$-16, %esp					// 栈顶与16字节对齐
	pushl	-4(%ecx)
	pushl	%ebp
	.cfi_escape 0x10,0x5,0x2,0x75,0
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%ecx
	.cfi_escape 0xf,0x3,0x75,0x78,0x6
	.cfi_escape 0x10,0x3,0x2,0x75,0x7c
	call	__x86.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	subl	$12, %esp
	leal	.LC0@GOTOFF(%ebx), %eax
	pushl	%eax
	call	puts@PLT					// 因为只有输出，没有格式，编译器用puts函数替换了printf
	movl	$0, (%esp)
	call	exit@PLT					// 因为有了exit函数，后面的return就不编译了
	.cfi_endproc
.LFE41:
	.size	main, .-main
	.section	.text.__x86.get_pc_thunk.bx,"axG",@progbits,__x86.get_pc_thunk.bx,comdat
	.globl	__x86.get_pc_thunk.bx
	.hidden	__x86.get_pc_thunk.bx
	.type	__x86.get_pc_thunk.bx, @function
__x86.get_pc_thunk.bx:
.LFB42:
	.cfi_startproc
	movl	(%esp), %ebx
	ret
	.cfi_endproc
.LFE42:
	.ident	"GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0"
	.section	.note.GNU-stack,"",@progbits
